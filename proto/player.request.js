// @generated by protobuf-ts 2.8.2 with parameter output_javascript
// @generated from protobuf file "player.request.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType {
    constructor() {
        super("Player", [
            { no: 1, name: "context", kind: "message", T: () => Player_Context },
            { no: 2, name: "videoId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "playbackContext", kind: "message", T: () => Player_PlaybackContext }
        ]);
    }
    create(value) {
        const message = { videoId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Player.Context context */ 1:
                    message.context = Player_Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* string videoId */ 2:
                    message.videoId = reader.string();
                    break;
                case /* Player.PlaybackContext playbackContext */ 4:
                    message.playbackContext = Player_PlaybackContext.internalBinaryRead(reader, reader.uint32(), options, message.playbackContext);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Player.Context context = 1; */
        if (message.context)
            Player_Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string videoId = 2; */
        if (message.videoId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.videoId);
        /* Player.PlaybackContext playbackContext = 4; */
        if (message.playbackContext)
            Player_PlaybackContext.internalBinaryWrite(message.playbackContext, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_Context$Type extends MessageType {
    constructor() {
        super("Player.Context", [
            { no: 1, name: "client", kind: "message", T: () => Player_Context_Client }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Player.Context.Client client */ 1:
                    message.client = Player_Context_Client.internalBinaryRead(reader, reader.uint32(), options, message.client);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Player.Context.Client client = 1; */
        if (message.client)
            Player_Context_Client.internalBinaryWrite(message.client, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.Context
 */
export const Player_Context = new Player_Context$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_Context_Client$Type extends MessageType {
    constructor() {
        super("Player.Context.Client", [
            { no: 1, name: "hl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "gl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "deviceMake", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "deviceModel", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "clientVersion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "osName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "osVersion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 80, name: "timeZone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { hl: "", gl: "", deviceMake: "", deviceModel: "", clientVersion: "", osName: "", osVersion: "", timeZone: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hl */ 1:
                    message.hl = reader.string();
                    break;
                case /* string gl */ 2:
                    message.gl = reader.string();
                    break;
                case /* string deviceMake */ 12:
                    message.deviceMake = reader.string();
                    break;
                case /* string deviceModel */ 13:
                    message.deviceModel = reader.string();
                    break;
                case /* string clientVersion */ 17:
                    message.clientVersion = reader.string();
                    break;
                case /* string osName */ 18:
                    message.osName = reader.string();
                    break;
                case /* string osVersion */ 19:
                    message.osVersion = reader.string();
                    break;
                case /* string timeZone */ 80:
                    message.timeZone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string hl = 1; */
        if (message.hl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hl);
        /* string gl = 2; */
        if (message.gl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gl);
        /* string deviceMake = 12; */
        if (message.deviceMake !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.deviceMake);
        /* string deviceModel = 13; */
        if (message.deviceModel !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.deviceModel);
        /* string clientVersion = 17; */
        if (message.clientVersion !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.clientVersion);
        /* string osName = 18; */
        if (message.osName !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.osName);
        /* string osVersion = 19; */
        if (message.osVersion !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.osVersion);
        /* string timeZone = 80; */
        if (message.timeZone !== "")
            writer.tag(80, WireType.LengthDelimited).string(message.timeZone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.Context.Client
 */
export const Player_Context_Client = new Player_Context_Client$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_PlaybackContext$Type extends MessageType {
    constructor() {
        super("Player.PlaybackContext", [
            { no: 1, name: "contentPlaybackContext", kind: "message", T: () => Player_PlaybackContext_ContentPlaybackContext }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Player.PlaybackContext.ContentPlaybackContext contentPlaybackContext */ 1:
                    message.contentPlaybackContext = Player_PlaybackContext_ContentPlaybackContext.internalBinaryRead(reader, reader.uint32(), options, message.contentPlaybackContext);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Player.PlaybackContext.ContentPlaybackContext contentPlaybackContext = 1; */
        if (message.contentPlaybackContext)
            Player_PlaybackContext_ContentPlaybackContext.internalBinaryWrite(message.contentPlaybackContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.PlaybackContext
 */
export const Player_PlaybackContext = new Player_PlaybackContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_PlaybackContext_ContentPlaybackContext$Type extends MessageType {
    constructor() {
        super("Player.PlaybackContext.ContentPlaybackContext", [
            { no: 4, name: "id4", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "id6", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "id8", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "id9", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 id4 */ 4:
                    message.id4 = reader.int32();
                    break;
                case /* optional int32 id6 */ 6:
                    message.id6 = reader.int32();
                    break;
                case /* optional int32 id8 */ 8:
                    message.id8 = reader.int32();
                    break;
                case /* optional int32 id9 */ 9:
                    message.id9 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 id4 = 4; */
        if (message.id4 !== undefined)
            writer.tag(4, WireType.Varint).int32(message.id4);
        /* optional int32 id6 = 6; */
        if (message.id6 !== undefined)
            writer.tag(6, WireType.Varint).int32(message.id6);
        /* optional int32 id8 = 8; */
        if (message.id8 !== undefined)
            writer.tag(8, WireType.Varint).int32(message.id8);
        /* optional int32 id9 = 9; */
        if (message.id9 !== undefined)
            writer.tag(9, WireType.Varint).int32(message.id9);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.PlaybackContext.ContentPlaybackContext
 */
export const Player_PlaybackContext_ContentPlaybackContext = new Player_PlaybackContext_ContentPlaybackContext$Type();
